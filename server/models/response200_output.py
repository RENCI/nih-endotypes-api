# coding: utf-8

from __future__ import absolute_import
from models.endotypes_period import EndotypesPeriod
from models.base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from util import deserialize_model


class Response200Output(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, endotype_id: str=None, endotype_description: str=None, endotype_evidence: str=None, periods: List[EndotypesPeriod]=None):
        """
        Response200Output - a model defined in Swagger

        :param endotype_id: The endotype_id of this Response200Output.
        :type endotype_id: str
        :param endotype_description: The endotype_description of this Response200Output.
        :type endotype_description: str
        :param endotype_evidence: The endotype_evidence of this Response200Output.
        :type endotype_evidence: str
        :param periods: The periods of this Response200Output.
        :type periods: List[EndotypesPeriod]
        """
        self.swagger_types = {
            'endotype_id': str,
            'endotype_description': str,
            'endotype_evidence': str,
            'periods': List[EndotypesPeriod]
        }

        self.attribute_map = {
            'endotype_id': 'endotype_id',
            'endotype_description': 'endotype_description',
            'endotype_evidence': 'endotype_evidence',
            'periods': 'periods'
        }

        self._endotype_id = endotype_id
        self._endotype_description = endotype_description
        self._endotype_evidence = endotype_evidence
        self._periods = periods

    @classmethod
    def from_dict(cls, dikt) -> 'Response200Output':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The response_200_output of this Response200Output.
        :rtype: Response200Output
        """
        return deserialize_model(dikt, cls)

    @property
    def endotype_id(self) -> str:
        """
        Gets the endotype_id of this Response200Output.

        :return: The endotype_id of this Response200Output.
        :rtype: str
        """
        return self._endotype_id

    @endotype_id.setter
    def endotype_id(self, endotype_id: str):
        """
        Sets the endotype_id of this Response200Output.

        :param endotype_id: The endotype_id of this Response200Output.
        :type endotype_id: str
        """

        self._endotype_id = endotype_id

    @property
    def endotype_description(self) -> str:
        """
        Gets the endotype_description of this Response200Output.

        :return: The endotype_description of this Response200Output.
        :rtype: str
        """
        return self._endotype_description

    @endotype_description.setter
    def endotype_description(self, endotype_description: str):
        """
        Sets the endotype_description of this Response200Output.

        :param endotype_description: The endotype_description of this Response200Output.
        :type endotype_description: str
        """

        self._endotype_description = endotype_description

    @property
    def endotype_evidence(self) -> str:
        """
        Gets the endotype_evidence of this Response200Output.

        :return: The endotype_evidence of this Response200Output.
        :rtype: str
        """
        return self._endotype_evidence

    @endotype_evidence.setter
    def endotype_evidence(self, endotype_evidence: str):
        """
        Sets the endotype_evidence of this Response200Output.

        :param endotype_evidence: The endotype_evidence of this Response200Output.
        :type endotype_evidence: str
        """

        self._endotype_evidence = endotype_evidence

    @property
    def periods(self) -> List[EndotypesPeriod]:
        """
        Gets the periods of this Response200Output.

        :return: The periods of this Response200Output.
        :rtype: List[EndotypesPeriod]
        """
        return self._periods

    @periods.setter
    def periods(self, periods: List[EndotypesPeriod]):
        """
        Sets the periods of this Response200Output.

        :param periods: The periods of this Response200Output.
        :type periods: List[EndotypesPeriod]
        """

        self._periods = periods

