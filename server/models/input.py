# coding: utf-8

from __future__ import absolute_import
from models.visit import Visit
import re
from models.base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from util import deserialize_model


class Input(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    def __init__(self, date_of_birth: date = None, race: str = None, sex: str = None, model_type: str = None, visits: List[Visit] = None):
    """
    Input - a model defined in Swagger

    :param date_of_birth: The date_of_birth of this Input.
    :type date_of_birth: date
    :param race: The race of this Input.
    :type race: str
    :param sex: The sex of this Input.
    :type sex: str
    :param model_type: The model_type of this Input.
    :type model_type: str
    :param visits: The visits of this Input.
    :type visits: List[Visit]
    """
    self.swagger_types = {
        'date_of_birth': date,
        'race': str,
        'sex': str,
        'model_type': str,
        'visits': List[Visit]
    }

    self.attribute_map = {
        'date_of_birth': 'date_of_birth',
        'race': 'race',
        'sex': 'sex',
        'model_type': 'model_type',
        'visits': 'visits'
    }

    self._date_of_birth = date_of_birth
    self._race = race
    self._sex = sex
    self._model_type = model_type
    self._visits = visits

    @classmethod
    def from_dict(cls, dikt) -> 'Input':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The input of this Input.
        :rtype: Input
        """
        return deserialize_model(dikt, cls)

    @property
    def date_of_birth(self) -> date:
        """
        Gets the date_of_birth of this Input.

        :return: The date_of_birth of this Input.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth: date):
        """
        Sets the date_of_birth of this Input.

        :param date_of_birth: The date_of_birth of this Input.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth

    @property
    def race(self) -> str:
        """
        Gets the race of this Input.

        :return: The race of this Input.
        :rtype: str
        """
        return self._race

    @race.setter
    def race(self, race: str):
        """
        Sets the race of this Input.

        :param race: The race of this Input.
        :type race: str
        """

        self._race = race

    @property
    def sex(self) -> str:
        """
        Gets the sex of this Input.

        :return: The sex of this Input.
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex: str):
        """
        Sets the sex of this Input.

        :param sex: The sex of this Input.
        :type sex: str
        """
        if sex is not None and not re.search('^(F|M|Female|Male|FEMALE|MALE)$', sex):
            raise ValueError("Invalid value for `sex`, must be following pattern or equal to `/^(F|M|Female|Male|FEMALE|MALE)$/`")

        self._sex = sex

    @property
    def model_type(self) -> str:
    """
    Gets the model_type of this Input.

    :return: The model_type of this Input.
    :rtype: str
    """
    return self._model_type

    @model_type.setter
    def model_type(self, model_type: str):
    """
    Sets the model_type of this Input.

    :param model_type: The model_type of this Input.
    :type model_type: str
    """
    if model_type is not None and not re.search('^[M|m][0-9]$', model_type):
        raise ValueError(
        "Invalid value for `model_type`, must be a follow pattern or equal to `/^[M|m][0-9]$/`")

    self._model_type = model_type


    @property
    def visits(self) -> List[Visit]:
        """
        Gets the visits of this Body.

        :return: The visits of this Body.
        :rtype: List[Visit]
        """
        return self._visits

    @visits.setter
    def visits(self, visits: List[Visit]):
        """
        Sets the visits of this Body.

        :param visits: The visits of this Body.
        :type visits: List[Visit]
        """

        self._visits = visits

